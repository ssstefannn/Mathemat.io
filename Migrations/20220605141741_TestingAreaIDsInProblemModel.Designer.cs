// <auto-generated />
using System;
using Mathemat.io.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mathematio.Migrations
{
    [DbContext(typeof(MathematioContext))]
    [Migration("20220605141741_TestingAreaIDsInProblemModel")]
    partial class TestingAreaIDsInProblemModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Mathemat.io.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AreaID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Mathemat.io.Models.Contest", b =>
                {
                    b.Property<int>("ContestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestID"), 1L, 1);

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContestID");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Mathemat.io.Models.Contestant", b =>
                {
                    b.Property<int>("ContestantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestantID"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContestantPoints")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContestantID");

                    b.ToTable("Contestants");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestJudges", b =>
                {
                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("MentorID")
                        .HasColumnType("int");

                    b.HasKey("ContestID", "MentorID");

                    b.HasIndex("MentorID");

                    b.ToTable("ContestJudges");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestProblems", b =>
                {
                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.HasKey("ContestID", "ProblemID");

                    b.HasIndex("ProblemID");

                    b.ToTable("ContestProblems");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestSubmissions", b =>
                {
                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("ContestantID")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContestID", "ProblemID", "ContestantID");

                    b.HasIndex("ContestantID");

                    b.HasIndex("ProblemID");

                    b.ToTable("ContestSubmissions");
                });

            modelBuilder.Entity("Mathemat.io.Models.Mentor", b =>
                {
                    b.Property<int>("MentorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MentorID"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("MentorPoints")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MentorID");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("Mathemat.io.Models.Mentorship", b =>
                {
                    b.Property<int>("MentorID")
                        .HasColumnType("int");

                    b.Property<int>("ContestantID")
                        .HasColumnType("int");

                    b.HasKey("MentorID", "ContestantID");

                    b.HasIndex("ContestantID");

                    b.ToTable("Mentorships");
                });

            modelBuilder.Entity("Mathemat.io.Models.Participants", b =>
                {
                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("ContestantID")
                        .HasColumnType("int");

                    b.HasKey("ContestID", "ContestantID");

                    b.HasIndex("ContestantID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Mathemat.io.Models.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProblemId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("Mathemat.io.Models.ProblemAreas", b =>
                {
                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.HasKey("ProblemID", "AreaID");

                    b.HasIndex("AreaID");

                    b.ToTable("ProblemAreas");
                });

            modelBuilder.Entity("Mathemat.io.Models.ProblemAuthors", b =>
                {
                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("MentorID")
                        .HasColumnType("int");

                    b.HasKey("ProblemID", "MentorID");

                    b.HasIndex("MentorID");

                    b.ToTable("ProblemAuthors");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestJudges", b =>
                {
                    b.HasOne("Mathemat.io.Models.Contest", "Contest")
                        .WithMany("Judges")
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Mentor", "Judge")
                        .WithMany("Contests")
                        .HasForeignKey("MentorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestProblems", b =>
                {
                    b.HasOne("Mathemat.io.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Mathemat.io.Models.ContestSubmissions", b =>
                {
                    b.HasOne("Mathemat.io.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Contestant", "Contestant")
                        .WithMany()
                        .HasForeignKey("ContestantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Contestant");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Mathemat.io.Models.Mentorship", b =>
                {
                    b.HasOne("Mathemat.io.Models.Contestant", "Contestant")
                        .WithMany("Mentors")
                        .HasForeignKey("ContestantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Mentor", "Mentor")
                        .WithMany("Contestants")
                        .HasForeignKey("MentorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contestant");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Mathemat.io.Models.Participants", b =>
                {
                    b.HasOne("Mathemat.io.Models.Contest", "Contest")
                        .WithMany("Participants")
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Contestant", "Contestant")
                        .WithMany("Contests")
                        .HasForeignKey("ContestantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Contestant");
                });

            modelBuilder.Entity("Mathemat.io.Models.ProblemAreas", b =>
                {
                    b.HasOne("Mathemat.io.Models.Area", "Area")
                        .WithMany("Problems")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Problem", "Problem")
                        .WithMany("Areas")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Mathemat.io.Models.ProblemAuthors", b =>
                {
                    b.HasOne("Mathemat.io.Models.Mentor", "Author")
                        .WithMany("Problems")
                        .HasForeignKey("MentorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mathemat.io.Models.Problem", "Problem")
                        .WithMany("Authors")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Mathemat.io.Models.Area", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Mathemat.io.Models.Contest", b =>
                {
                    b.Navigation("Judges");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Mathemat.io.Models.Contestant", b =>
                {
                    b.Navigation("Contests");

                    b.Navigation("Mentors");
                });

            modelBuilder.Entity("Mathemat.io.Models.Mentor", b =>
                {
                    b.Navigation("Contestants");

                    b.Navigation("Contests");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Mathemat.io.Models.Problem", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Authors");
                });
#pragma warning restore 612, 618
        }
    }
}
